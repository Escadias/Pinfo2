user nginx;
worker_processes 1;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

# Note: if you wish to use this configuration outside of a on-machine docker
# configuration, make sure to use end-to-end encryption.
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    sendfile        on;
    #tcp_nopush     on;
    keepalive_timeout  65;
    #gzip  on;

    server {
		listen 443 ssl;
		server_name pinfo2.unige.ch;

		# Security
        # https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-14-04
		# https://blog.appcanary.com/2017/http-security-headers.html
		# Note, it is necessary to preload the keys into the /opt/production/seckeys
		# before starting the container.
		ssl_certificate /etc/nginx/security/keys/fullchain.pem;
		ssl_certificate_key /etc/nginx/security/keys/privkey.pem;
		ssl_dhparam /etc/ssl/certs/dhparam.pem;

		add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		ssl_prefer_server_ciphers on;
		ssl_session_timeout 1d;
		ssl_session_cache shared:SSL:50m;
		ssl_stapling on;
		ssl_stapling_verify on;

        root /usr/share/nginx/html;
        index index.html index.htm;
        # The wildfly server gets all the api requests.
        location /restapi/ {
            proxy_pass http://appserver:8080 ;
        }
        # The web application. It is served by the nginx server itself.
        location / {
			try_files $uri $uri/ /index.html;
        }
    }

	# Redirect http connexion to https:
	server {
		listen 80;
		server_name pinfo2.unige.ch;
		return 301 https://$host$request_uri;
	}
}
